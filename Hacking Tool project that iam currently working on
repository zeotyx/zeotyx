using System;
using System.Net.Http;
using System.Net.Sockets;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.IO;
using System.Diagnostics;


namespace graphic_for_ip_locator
{

    internal class Program
    {
        static async Task<bool> IsPortOpen(string host, int port, int timeout = 1000)
        {
            try
            {
                using (TcpClient client = new TcpClient())
                {
                    var connectionTask = client.ConnectAsync(host, port);
                    var success = await Task.WhenAny(connectionTask, Task.Delay(timeout)) == connectionTask;

                    return success && client.Connected;
                }
            }
            catch (Exception)
            {
                return false;
            }  
        }

        static async Task ScanPorts(string host, int startPort, int endPort)
        {
            Console.WriteLine($"Scanning {host} for open ports...");
            for (int port = startPort; port <= endPort; port++)
            {
                bool isOpen = await IsPortOpen(host, port);
                if (isOpen)
                {
                    Console.WriteLine($"Port {port} is open.");
                }
                else
                {
                    Console.WriteLine($"Port {port} is closed.");
                }
            }
        }

        static string projectpath = Path.Combine(Directory.GetCurrentDirectory(), "Logs");
        static string Ipslogpath = Path.Combine(projectpath, "IP infos.txt");
        static string ipslog = "";
        static string personlogpath = Path.Combine(projectpath, "Personlogs.txt");
        static string personlog = "";
        static string ipv4 = @"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";
        static string person = @"^([A-Za-z]+)\s+([A-Za-z]+)\s+([A-Za-z]+)$";
        static string ipv6 = @"^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$";

        


    static async Task Main(string[] args)
        {
            if (!Directory.Exists(projectpath))
            {
                Directory.CreateDirectory(projectpath);
            }

            string apiKey = "d536228f24a1fe";

            string ApiKeyGoogle = "AIzaSyBl-7STP45strbHqu8yAg4zGkI3yD-jLH4";

            string EngineId = "41335839fa2864e73";
            displaymain();

            while (true)
            {
                
                var selected_option = Console.ReadLine();

                if (selected_option == "1")
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.Clear();
                    Console.WriteLine("IP:");
                    Console.ResetColor();
                    string targetip = Console.ReadLine();
                    if (Regex.IsMatch(targetip, ipv4) || Regex.IsMatch(targetip, ipv6))
                    {
                        string url = $"http://ipinfo.io/{targetip}/json?token={apiKey}";

                        using (HttpClient client = new HttpClient())
                        {
                            try
                            {

                                string response = await client.GetStringAsync(url);
                                var ipData = JsonConvert.DeserializeObject<IpInfo>(response);

                                string mapurl = $"https://www.openstreetmap.org/?mlat={ipData.Loc.Split(',')[0]}&mlon={ipData.Loc.Split(',')[1]}#map=15/{ipData.Loc.Split(',')[0]}/{ipData.Loc.Split(',')[1]}";

                                Console.Clear();
                                ipslog  = $@"
IP: {ipData.Ip}

Location: {ipData.City}, {ipData.Region}, {ipData.Country}

Map: {mapurl}

Organization: {ipData.Org}";
                                Console.WriteLine(ipslog);
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine("shit a error happaned: " + ex.Message);
                            }
                        }
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine("\nPress any key to go back or press s to save it");
                        ConsoleKeyInfo keyInfo = Console.ReadKey(true);
                        if (keyInfo.Key == ConsoleKey.S)
                        {
                            savelog(ipslog, Ipslogpath, true);
                            Thread.Sleep(500);
                            displaymain();
                        }
                        else
                        {
                            displaymain();
                        }
                        
                        
                    }
                    else
                    {
                        Console.WriteLine("Invalid format"); Thread.Sleep(1000);
                        displaymain();
                    }
                }
                else if (selected_option == "2")
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.Clear();
                    Console.WriteLine("enter pattern like this: name lastname city");
                    Console.ResetColor();
                    string query = Console.ReadLine();
                    if (Regex.IsMatch(query, person))
                    {
                        Console.Clear();
                        string apiUrl = $"https://www.googleapis.com/customsearch/v1?q={query}&key={ApiKeyGoogle}&cx={EngineId}";

                        using (HttpClient client = new HttpClient())
                        {

                            HttpResponseMessage response = await client.GetAsync(apiUrl);


                            if (response.IsSuccessStatusCode)
                            {

                                string jsonResponse = await response.Content.ReadAsStringAsync();


                                JObject json = JObject.Parse(jsonResponse);


                                var items = json["items"];


                                foreach (var item in items)
                                {
                                   
                                    
                                    string title = item["title"].ToString();
                                    string link = item["link"].ToString();
                                    string snippet = item["snippet"].ToString();

                                    personlog = $@"/---------------------------------------------------\
Who: {query}
Title: {title}
Link: {link}
Description: {snippet}
---------------------------------------------------";
                                    Console.WriteLine(personlog);
                                }
                            }
                            else
                            {

                                Console.WriteLine("Failed to fetch data.");
                                Thread.Sleep(500);
                            }
                            Console.ForegroundColor = ConsoleColor.Green;
                            Console.WriteLine("\nPress any key to go back or press s to save it");
                            ConsoleKeyInfo keyInfo = Console.ReadKey(true);
                            if (keyInfo.Key == ConsoleKey.S)
                            {
                                savelog($"who: {query}", personlogpath, false);
                                string jsonResponse = await response.Content.ReadAsStringAsync();


                                JObject json = JObject.Parse(jsonResponse);

                                var items = json["items"];
                                foreach (var item in items)
                                {


                                    string title = item["title"].ToString();
                                    string link = item["link"].ToString();
                                    string snippet = item["snippet"].ToString();

                                    personlog = $@"/---------------------------------------------------\
Who: {query}
Title: {title}
Link: {link}
Description: {snippet}
---------------------------------------------------";
                                    savelog(personlog, personlogpath, false);
                                }
                                Thread.Sleep(4000);
                                displaymain();
                            }
                            else
                            {
                                displaymain();
                            }

                        }
                    }
                    else
                    {
                        Console.WriteLine("wrong pattern try again");
                        Thread.Sleep(500);
                        displaymain();
                    }


                }
                else if (selected_option == "3")
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.Clear();
                    Console.WriteLine("IP:");
                    Console.ResetColor();
                    string ipAddress = Console.ReadLine();

                    if (Regex.IsMatch(ipAddress, ipv4))
                    {
                        await CheckIfBot(ipAddress);
                    }
                    else
                    {
                        Console.WriteLine("Invalid IP address format.");
                        Thread.Sleep(500);
                        displaymain();
                    }
                }
                else if (selected_option == "4")
                {
                    Console.WriteLine("IP:");
                    string targetHost = Console.ReadLine();

                    Console.WriteLine("starting port:");
                    int startPort = int.Parse(Console.ReadLine());

                    Console.WriteLine("ending port:");
                    int endPort = int.Parse(Console.ReadLine());


                    await ScanPorts(targetHost, startPort, endPort);

                    Console.WriteLine("Scan completed. click any button to exit");

                    Console.ReadKey();
                    displaymain();
                    
                }
                else if(selected_option == "5")
                {
                    Console.Clear();
                    Console.ForegroundColor= ConsoleColor.Blue;
                    Console.WriteLine(@"
╔════════════════════════════════════════════════════════════════╗     
║    ▀▀▀▀▀▀  ▀▀▀▀▀   ▀       ▀▀▀▀▀▀▀                             ║
║    ▀         ▀     ▀       ▀                                   ║
║    ▀▀▀▀▀▀    ▀     ▀       ▀▀▀▀▀▀▀                             ║
║    ▀         ▀     ▀       ▀                                   ║
║    ▀       ▀▀▀▀▀   ▀▀▀▀▀   ▀▀▀▀▀▀▀                             ║
╠════════════════════════════════════════════════════════════════╣
║                        Log File Config                         ║
╠════════════════════════════════════════════════════════════════╣
║ 1) Open log File                                               ║
║ 2) Delete all logs                                             ║
╠════════════════════════════════════════════════════════════════╣
");
                    Console.ResetColor();
                    selected_option = Console.ReadLine();
                    Console.ForegroundColor = ConsoleColor.Blue;
                    Console.Clear();
                    if (selected_option == "1")
                    {
                        
                        if (Directory.Exists(projectpath))
                        {

                            Process.Start(projectpath);
                            Console.WriteLine("File is now open.");
                            Thread.Sleep(500);
                            displaymain();
                        }
                        else
                        {
                            Console.WriteLine("bruh directory dosent exists");
                            Thread.Sleep(500);
                            displaymain();
                        }
                    }
                    else if (selected_option == "2")
                    {
                        Console.WriteLine("ip or person "); string option = Console.ReadLine();

                        if (option.ToLower() == "ip")
                        {
                            Console.WriteLine("are u sure y/n");
                            if (Console.ReadLine().ToLower() == "y")
                            {
                                File.WriteAllText(Ipslogpath, string.Empty);
                                Console.WriteLine($"logs deleted from {Ipslogpath}");
                                Thread.Sleep(500);
                                displaymain();
                            }

                            
                        }
                        else if (option.ToLower() == "person")
                        {
                            Console.WriteLine("are u sure y/n");
                            if (Console.ReadLine().ToLower() == "y")
                            {
                                File.WriteAllText(personlogpath, string.Empty);
                                Console.WriteLine($"logs deleted from {personlogpath}");
                                Thread.Sleep(500);
                                displaymain();
                            }
                            
                        }
                        
                    }
                    
                }
                else
                {
                    Console.WriteLine("Wrong option");
                    Thread.Sleep(500);
                    displaymain();
                }
            }
        }


        static async Task CheckIfBot(string ipAddress)
        {
            string url = $"http://ip-api.com/json/{ipAddress}?fields=proxy,hosting,bots";

            using (HttpClient client = new HttpClient())
            {
                try
                {
                    string response = await client.GetStringAsync(url);
                    var ipData = JsonConvert.DeserializeObject<IpApiResponse>(response);

                    Console.Clear();

                    
                    if (ipData.Proxy || ipData.Hosting || ipData.Bots == "yes")
                    {
                        Console.WriteLine("This IP is likely a bot or proxy.");
                    }
                    else
                    {
                        Console.WriteLine("This IP seems to belong to a real person.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Oh no a error: " + ex.Message);
                }
            }

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\nPress any key to go back");
            Console.ReadKey();


            displaymain();
        }
        static void displaymain()
        {         
            Console.ForegroundColor = ConsoleColor.Green;
            Console.Clear();
            Console.WriteLine(@"
╔════════════════════════════════════════════════════════════════╗
║    ███████╗██████╗ ██╗  ██╗███████╗███████╗████████╗███████╗   ║
║    ██╔════╝██╔══██╗██║  ██║██╔════╝██╔════╝╚══██╔══╝██╔════╝   ║
║    █████╗  ██████╔╝███████║███████╗███████╗   ██║   █████╗     ║
║    ██╔══╝  ██╔══██╗██╔══██║╚════██║╚════██║   ██║   ██╔══╝     ║
║    ███████╗██║  ██║██║  ██║███████║███████║   ██║   ███████╗   ║         
╠════════════════════════════════════════════════════════════════╣
║                        IPX TOOL (HACKING tool)                 ║
╠════════════════════════════════════════════════════════════════╣
║ 1) Info gathering                                              ║
║ 2) Info about person (doesn't work that much)                  ║
║ 3) Bot or real person?                                         ║
║ 4) Tcp Port Scanning                                           ║
║ 5) log settings                                                ║
╠════════════════════════════════════════════════════════════════╣
");

            Console.ResetColor();
        }
        static void savelog(string save, string path, bool ipdir)
        {
            try
            {
                
                
                if (!Directory.Exists(projectpath))
                {
                    
                    Console.WriteLine("directory dosent exist");
                    Directory.CreateDirectory(projectpath);
                    Thread.Sleep(1000);
                }
                else
                {
                    if (ipdir == true)
                    {
                        using (StreamWriter writer = new StreamWriter(path, append: true))
                        {
                            writer.WriteLine(save);
                        }

                        Console.WriteLine($"Log saved to {path}");
                        Thread.Sleep(500);
                    }
                    else
                    {
                        using (StreamWriter writer = new StreamWriter(path, append: true))
                        {
                            writer.WriteLine(save);
                        }

                        Console.WriteLine($"Log saved to {path}");
                    }
                    
                }
                displaymain();

            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                Thread.Sleep(1000);
                displaymain();
            }

        }
    }

    

    public class IpInfo
    {
        public string Ip { get; set; }
        public string City { get; set; }
        public string Region { get; set; }
        public string Country { get; set; }
        public string Loc { get; set; }
        public string Org { get; set; }
    }
    

    public class IpApiResponse
    {
        public string Query { get; set; }
        public bool Proxy { get; set; }
        public bool Hosting { get; set; }
        public string Bots { get; set; }
    }
}
